// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: businesses.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBusiness = `-- name: CreateBusiness :one
insert into businesses (
    id,
    name,
    street_address,
    city, state,
    zipcode,
    business_owner_id
)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, name, street_address, city, state, zipcode, business_owner_id
`

type CreateBusinessParams struct {
	ID              uuid.UUID `json:"id"`
	Name            string    `json:"name"`
	StreetAddress   string    `json:"street_address"`
	City            uuid.UUID `json:"city"`
	State           string    `json:"state"`
	Zipcode         string    `json:"zipcode"`
	BusinessOwnerID uuid.UUID `json:"business_owner_id"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.db.QueryRow(ctx, createBusiness,
		arg.ID,
		arg.Name,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Zipcode,
		arg.BusinessOwnerID,
	)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.BusinessOwnerID,
	)
	return i, err
}

const getAllBusinesses = `-- name: GetAllBusinesses :many
select id, name, street_address, city, state, zipcode, business_owner_id from businesses
`

func (q *Queries) GetAllBusinesses(ctx context.Context) ([]Business, error) {
	rows, err := q.db.Query(ctx, getAllBusinesses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Business{}
	for rows.Next() {
		var i Business
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StreetAddress,
			&i.City,
			&i.State,
			&i.Zipcode,
			&i.BusinessOwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBusiness = `-- name: UpdateBusiness :one
update businesses
set
    "name" = $2,
    "street_address" = $3,
    "city" = $4,
    "state" = $5,
    "zipcode" = $6,
    "business_owner_id" = $7
where "id" = $1
returning id, name, street_address, city, state, zipcode, business_owner_id
`

type UpdateBusinessParams struct {
	ID              uuid.UUID `json:"id"`
	Name            string    `json:"name"`
	StreetAddress   string    `json:"street_address"`
	City            uuid.UUID `json:"city"`
	State           string    `json:"state"`
	Zipcode         string    `json:"zipcode"`
	BusinessOwnerID uuid.UUID `json:"business_owner_id"`
}

func (q *Queries) UpdateBusiness(ctx context.Context, arg UpdateBusinessParams) (Business, error) {
	row := q.db.QueryRow(ctx, updateBusiness,
		arg.ID,
		arg.Name,
		arg.StreetAddress,
		arg.City,
		arg.State,
		arg.Zipcode,
		arg.BusinessOwnerID,
	)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StreetAddress,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.BusinessOwnerID,
	)
	return i, err
}
