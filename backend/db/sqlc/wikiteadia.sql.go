// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: wikiteadia.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTea = `-- name: CreateTea :one
insert into teas (
    id,
    name,
    img_url,
    description,
    brew_time,
    brew_temp,
    published
)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, name, img_url, description, brew_time, brew_temp, published
`

type CreateTeaParams struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	ImgUrl      pgtype.Text   `json:"img_url"`
	Description string        `json:"description"`
	BrewTime    pgtype.Text   `json:"brew_time"`
	BrewTemp    pgtype.Float8 `json:"brew_temp"`
	Published   bool          `json:"published"`
}

func (q *Queries) CreateTea(ctx context.Context, arg CreateTeaParams) (Tea, error) {
	row := q.db.QueryRow(ctx, createTea,
		arg.ID,
		arg.Name,
		arg.ImgUrl,
		arg.Description,
		arg.BrewTime,
		arg.BrewTemp,
		arg.Published,
	)
	var i Tea
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.Description,
		&i.BrewTime,
		&i.BrewTemp,
		&i.Published,
	)
	return i, err
}

const createTeaAromaticTags = `-- name: CreateTeaAromaticTags :one
insert into tea_aromatic_tags (id, name, tea_id)
values ($1, $2, $3)
returning id, name, tea_id
`

type CreateTeaAromaticTagsParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	TeaID uuid.UUID `json:"tea_id"`
}

func (q *Queries) CreateTeaAromaticTags(ctx context.Context, arg CreateTeaAromaticTagsParams) (TeaAromaticTag, error) {
	row := q.db.QueryRow(ctx, createTeaAromaticTags, arg.ID, arg.Name, arg.TeaID)
	var i TeaAromaticTag
	err := row.Scan(&i.ID, &i.Name, &i.TeaID)
	return i, err
}

const createTeaAromatics = `-- name: CreateTeaAromatics :one
insert into tea_aromatics (name)
values ($1)
returning name
`

func (q *Queries) CreateTeaAromatics(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, createTeaAromatics, name)
	err := row.Scan(&name)
	return name, err
}

const createTeaFlavorProfileTags = `-- name: CreateTeaFlavorProfileTags :one
insert into tea_flavor_profile_tags (id, name, tea_id)
values ($1, $2, $3)
returning id, name, tea_id
`

type CreateTeaFlavorProfileTagsParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	TeaID uuid.UUID `json:"tea_id"`
}

func (q *Queries) CreateTeaFlavorProfileTags(ctx context.Context, arg CreateTeaFlavorProfileTagsParams) (TeaFlavorProfileTag, error) {
	row := q.db.QueryRow(ctx, createTeaFlavorProfileTags, arg.ID, arg.Name, arg.TeaID)
	var i TeaFlavorProfileTag
	err := row.Scan(&i.ID, &i.Name, &i.TeaID)
	return i, err
}

const createTeaFlavorProfiles = `-- name: CreateTeaFlavorProfiles :one
insert into tea_flavor_profiles (name)
values ($1)
returning name
`

func (q *Queries) CreateTeaFlavorProfiles(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, createTeaFlavorProfiles, name)
	err := row.Scan(&name)
	return name, err
}

const createTeaOriginTags = `-- name: CreateTeaOriginTags :one
insert into tea_origin_tags (id, name, tea_id)
values ($1, $2, $3)
returning id, name, tea_id
`

type CreateTeaOriginTagsParams struct {
	ID    uuid.UUID   `json:"id"`
	Name  pgtype.Text `json:"name"`
	TeaID uuid.UUID   `json:"tea_id"`
}

func (q *Queries) CreateTeaOriginTags(ctx context.Context, arg CreateTeaOriginTagsParams) (TeaOriginTag, error) {
	row := q.db.QueryRow(ctx, createTeaOriginTags, arg.ID, arg.Name, arg.TeaID)
	var i TeaOriginTag
	err := row.Scan(&i.ID, &i.Name, &i.TeaID)
	return i, err
}

const createTeaOrigins = `-- name: CreateTeaOrigins :one
insert into tea_origins (name)
values ($1)
returning name
`

func (q *Queries) CreateTeaOrigins(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, createTeaOrigins, name)
	err := row.Scan(&name)
	return name, err
}

const deleteTea = `-- name: DeleteTea :exec
delete from teas
where id = $1
`

func (q *Queries) DeleteTea(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTea, id)
	return err
}

const deleteTeaAromaticTag = `-- name: DeleteTeaAromaticTag :exec
delete from tea_aromatic_tags
where id = $1
`

func (q *Queries) DeleteTeaAromaticTag(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeaAromaticTag, id)
	return err
}

const deleteTeaAromatics = `-- name: DeleteTeaAromatics :exec
delete from tea_aromatics
where name = $1
`

func (q *Queries) DeleteTeaAromatics(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteTeaAromatics, name)
	return err
}

const deleteTeaFlavorProfileTag = `-- name: DeleteTeaFlavorProfileTag :exec
delete from tea_flavor_profile_tags
where id = $1
`

func (q *Queries) DeleteTeaFlavorProfileTag(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeaFlavorProfileTag, id)
	return err
}

const deleteTeaFlavorProfiles = `-- name: DeleteTeaFlavorProfiles :exec
delete from tea_flavor_profiles
where name = $1
`

func (q *Queries) DeleteTeaFlavorProfiles(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteTeaFlavorProfiles, name)
	return err
}

const deleteTeaOriginTag = `-- name: DeleteTeaOriginTag :exec
delete from tea_origin_tags
where id = $1
`

func (q *Queries) DeleteTeaOriginTag(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeaOriginTag, id)
	return err
}

const deleteTeaOrigins = `-- name: DeleteTeaOrigins :exec
delete from tea_origins
where name = $1
`

func (q *Queries) DeleteTeaOrigins(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteTeaOrigins, name)
	return err
}

const getAllTeaAromatics = `-- name: GetAllTeaAromatics :many
select name from tea_aromatics
`

func (q *Queries) GetAllTeaAromatics(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllTeaAromatics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTeaFlavorProfiles = `-- name: GetAllTeaFlavorProfiles :many
select name from tea_flavor_profiles
`

func (q *Queries) GetAllTeaFlavorProfiles(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllTeaFlavorProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTeaOrigins = `-- name: GetAllTeaOrigins :many
select name from tea_origins
`

func (q *Queries) GetAllTeaOrigins(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllTeaOrigins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTea = `-- name: GetTea :one
select id, name, img_url, description, brew_time, brew_temp, published
from teas
where id = $1 limit 1
`

func (q *Queries) GetTea(ctx context.Context, id uuid.UUID) (Tea, error) {
	row := q.db.QueryRow(ctx, getTea, id)
	var i Tea
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.Description,
		&i.BrewTime,
		&i.BrewTemp,
		&i.Published,
	)
	return i, err
}

const getTeaAromatic = `-- name: GetTeaAromatic :one
select name
from tea_aromatics
where name = $1 limit 1
`

func (q *Queries) GetTeaAromatic(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getTeaAromatic, name)
	err := row.Scan(&name)
	return name, err
}

const getTeaAromaticTag = `-- name: GetTeaAromaticTag :one
select id, name, tea_id
from tea_aromatic_tags
where id = $1
`

func (q *Queries) GetTeaAromaticTag(ctx context.Context, id uuid.UUID) (TeaAromaticTag, error) {
	row := q.db.QueryRow(ctx, getTeaAromaticTag, id)
	var i TeaAromaticTag
	err := row.Scan(&i.ID, &i.Name, &i.TeaID)
	return i, err
}

const getTeaAromaticTags = `-- name: GetTeaAromaticTags :many
select tags.name
from tea_aromatic_tags as tags
inner join teas on tags.tea_id = teas.id
where tags.tea_id = $1
`

func (q *Queries) GetTeaAromaticTags(ctx context.Context, teaID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getTeaAromaticTags, teaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeaFlavorProfile = `-- name: GetTeaFlavorProfile :one
select name
from tea_flavor_profiles
where name = $1 limit 1
`

func (q *Queries) GetTeaFlavorProfile(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getTeaFlavorProfile, name)
	err := row.Scan(&name)
	return name, err
}

const getTeaFlavorProfileTag = `-- name: GetTeaFlavorProfileTag :one
select id, name, tea_id
from tea_flavor_profile_tags
where id = $1
`

func (q *Queries) GetTeaFlavorProfileTag(ctx context.Context, id uuid.UUID) (TeaFlavorProfileTag, error) {
	row := q.db.QueryRow(ctx, getTeaFlavorProfileTag, id)
	var i TeaFlavorProfileTag
	err := row.Scan(&i.ID, &i.Name, &i.TeaID)
	return i, err
}

const getTeaFlavorProfileTags = `-- name: GetTeaFlavorProfileTags :many
select tags.name
from tea_flavor_profile_tags as tags
inner join teas on tags.tea_id = teas.id
where tags.tea_id = $1
`

func (q *Queries) GetTeaFlavorProfileTags(ctx context.Context, teaID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getTeaFlavorProfileTags, teaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeaOrigin = `-- name: GetTeaOrigin :one
select name
from tea_origins
where name = $1 limit 1
`

func (q *Queries) GetTeaOrigin(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getTeaOrigin, name)
	err := row.Scan(&name)
	return name, err
}

const getTeaOriginTag = `-- name: GetTeaOriginTag :one
select id, name, tea_id
from tea_origin_tags
where id = $1
`

func (q *Queries) GetTeaOriginTag(ctx context.Context, id uuid.UUID) (TeaOriginTag, error) {
	row := q.db.QueryRow(ctx, getTeaOriginTag, id)
	var i TeaOriginTag
	err := row.Scan(&i.ID, &i.Name, &i.TeaID)
	return i, err
}

const getTeaOriginTags = `-- name: GetTeaOriginTags :many
select tags.name
from tea_origin_tags as tags
inner join teas on tags.tea_id = teas.id
where tags.tea_id = $1
`

func (q *Queries) GetTeaOriginTags(ctx context.Context, teaID uuid.UUID) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getTeaOriginTags, teaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var name pgtype.Text
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeas = `-- name: GetTeas :many
select id, name, img_url, description, brew_time, brew_temp, published
from teas
where published = $1
`

func (q *Queries) GetTeas(ctx context.Context, published bool) ([]Tea, error) {
	rows, err := q.db.Query(ctx, getTeas, published)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tea{}
	for rows.Next() {
		var i Tea
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImgUrl,
			&i.Description,
			&i.BrewTime,
			&i.BrewTemp,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTea = `-- name: UpdateTea :exec
update teas
set
    name = $2,
    img_url = $3,
    description = $4,
    brew_time = $5,
    brew_temp = $6,
    published = $7
where id = $1
returning id, name, img_url, description, brew_time, brew_temp, published
`

type UpdateTeaParams struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	ImgUrl      pgtype.Text   `json:"img_url"`
	Description string        `json:"description"`
	BrewTime    pgtype.Text   `json:"brew_time"`
	BrewTemp    pgtype.Float8 `json:"brew_temp"`
	Published   bool          `json:"published"`
}

func (q *Queries) UpdateTea(ctx context.Context, arg UpdateTeaParams) error {
	_, err := q.db.Exec(ctx, updateTea,
		arg.ID,
		arg.Name,
		arg.ImgUrl,
		arg.Description,
		arg.BrewTime,
		arg.BrewTemp,
		arg.Published,
	)
	return err
}

const updateTeaAromaticTag = `-- name: UpdateTeaAromaticTag :exec
update tea_aromatic_tags
set name = $2
where id = $1
`

type UpdateTeaAromaticTagParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateTeaAromaticTag(ctx context.Context, arg UpdateTeaAromaticTagParams) error {
	_, err := q.db.Exec(ctx, updateTeaAromaticTag, arg.ID, arg.Name)
	return err
}

const updateTeaFlavorProfileTag = `-- name: UpdateTeaFlavorProfileTag :exec
update tea_flavor_profile_tags
set name = $2
where id = $1
`

type UpdateTeaFlavorProfileTagParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateTeaFlavorProfileTag(ctx context.Context, arg UpdateTeaFlavorProfileTagParams) error {
	_, err := q.db.Exec(ctx, updateTeaFlavorProfileTag, arg.ID, arg.Name)
	return err
}

const updateTeaOriginTag = `-- name: UpdateTeaOriginTag :exec
update tea_origin_tags
set name = $2
where id = $1
`

type UpdateTeaOriginTagParams struct {
	ID   uuid.UUID   `json:"id"`
	Name pgtype.Text `json:"name"`
}

func (q *Queries) UpdateTeaOriginTag(ctx context.Context, arg UpdateTeaOriginTagParams) error {
	_, err := q.db.Exec(ctx, updateTeaOriginTag, arg.ID, arg.Name)
	return err
}
