// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Business struct {
	ID              uuid.UUID `json:"id"`
	Name            string    `json:"name"`
	StreetAddress   string    `json:"street_address"`
	City            uuid.UUID `json:"city"`
	State           string    `json:"state"`
	Zipcode         string    `json:"zipcode"`
	BusinessOwnerID uuid.UUID `json:"business_owner_id"`
}

type BusinessFollower struct {
	ID         uuid.UUID `json:"id"`
	UserID     uuid.UUID `json:"user_id"`
	BusinessID uuid.UUID `json:"business_id"`
}

type BusinessOfferedTea struct {
	ID         uuid.UUID `json:"id"`
	BusinessID uuid.UUID `json:"business_id"`
	TeaID      uuid.UUID `json:"tea_id"`
}

type BusinessReview struct {
	ID       uuid.UUID   `json:"id"`
	Business uuid.UUID   `json:"business"`
	Author   uuid.UUID   `json:"author"`
	Rating   int16       `json:"rating"`
	Comment  pgtype.Text `json:"comment"`
	Date     pgtype.Date `json:"date"`
}

type Event struct {
	ID              uuid.UUID   `json:"id"`
	Name            string      `json:"name"`
	Host            uuid.UUID   `json:"host"`
	LocationName    pgtype.Text `json:"location_name"`
	StreetAddress   string      `json:"street_address"`
	City            uuid.UUID   `json:"city"`
	State           string      `json:"state"`
	Zipcode         string      `json:"zipcode"`
	Date            pgtype.Date `json:"date"`
	StartTime       pgtype.Time `json:"start_time"`
	EndTime         pgtype.Time `json:"end_time"`
	MdDescription   pgtype.Text `json:"md_description"`
	HtmlDescription pgtype.Text `json:"html_description"`
	Rsvps           bool        `json:"rsvps"`
	Capacity        pgtype.Int4 `json:"capacity"`
}

type EventCategory struct {
	Name string `json:"name"`
}

type EventCategoryTag struct {
	ID       uuid.UUID `json:"id"`
	EventID  uuid.UUID `json:"event_id"`
	Category string    `json:"category"`
}

type EventCohost struct {
	ID          uuid.UUID `json:"id"`
	EventID     uuid.UUID `json:"event_id"`
	UserID      uuid.UUID `json:"user_id"`
	Permissions string    `json:"permissions"`
}

type EventCohostPermission struct {
	Name string `json:"name"`
}

type EventRsvp struct {
	ID    uuid.UUID `json:"id"`
	Event uuid.UUID `json:"event"`
	User  uuid.UUID `json:"user"`
}

type EventWatcher struct {
	ID      uuid.UUID `json:"id"`
	EventID uuid.UUID `json:"event_id"`
	UserID  uuid.UUID `json:"user_id"`
}

type LocationsCity struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	State string    `json:"state"`
}

type LocationsState struct {
	Name         string `json:"name"`
	Abbreviation string `json:"abbreviation"`
}

type Tea struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	ImgUrl      pgtype.Text   `json:"img_url"`
	Description string        `json:"description"`
	BrewTime    pgtype.Text   `json:"brew_time"`
	BrewTemp    pgtype.Float8 `json:"brew_temp"`
	Published   bool          `json:"published"`
}

type TeaAromatic struct {
	Name string `json:"name"`
}

type TeaAromaticTag struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	TeaID uuid.UUID `json:"tea_id"`
}

type TeaFlavorProfile struct {
	Name string `json:"name"`
}

type TeaFlavorProfileTag struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	TeaID uuid.UUID `json:"tea_id"`
}

type TeaOrigin struct {
	Name string `json:"name"`
}

type TeaOriginTag struct {
	ID    uuid.UUID   `json:"id"`
	Name  pgtype.Text `json:"name"`
	TeaID uuid.UUID   `json:"tea_id"`
}

type User struct {
	ID        uuid.UUID   `json:"id"`
	Role      string      `json:"role"`
	Username  string      `json:"username"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Email     pgtype.Text `json:"email"`
	Password  []byte      `json:"password"`
	Location  uuid.UUID   `json:"location"`
}

type UserFavoriteTea struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
	TeaID  uuid.UUID `json:"tea_id"`
}

type UserRole struct {
	Name string `json:"name"`
}
